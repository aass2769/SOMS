<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.soms.board.repository.mapper.BoardMapper">
	<!-- 공지가 없는 게시물을 SELECT 하는 쿼리-->
	<!-- 만약 검색을 했다면 where if 절에 있는 조건에 따라 쿼리 select-->
	<!-- 공지 없음 -->
	<select id="selectBoard" resultType="project.soms.board.dto.BoardDto">
		SELECT board_no, board_section, board_announcement, board_title, board_content, board_date, board_views, employee_name, employee_team, manage
		FROM board as A
		LEFT JOIN employee as B
		ON A.employee_no = B.employee_no
		LEFT JOIN manage as C
		ON B.manage_no = C.manage_no
		<where>
			board_section = #{boardSection}
			AND board_announcement = '공지없음'
			<if test="selectList != '' and selectList == '제목'">and A.board_title like concat('%',#{searchInput},'%')</if>
			<if test="selectList != '' and selectList == '내용'">and A.board_content like concat('%',#{searchInput},'%')</if>
			<if test="selectList != '' and selectList == '작성자'">and B.employee_name like concat('%',#{searchInput},'%')</if>
		</where>
		ORDER BY A.board_date DESC, A.board_no DESC
    </select>
    
   <!-- 공지가 있는 게시물을 SELECT 하는 쿼리 -->
    <select id="selectNoticeBoard" resultType="project.soms.board.dto.BoardDto">
		SELECT board_no, board_section, board_announcement, board_title, board_content, board_date, board_views, employee_name, employee_team, manage
		FROM board as A
		LEFT JOIN employee as B
		ON A.employee_no = B.employee_no
		LEFT JOIN manage as C
		ON B.manage_no = C.manage_no
		<where>
			board_section = #{boardSection}
			AND board_announcement = '공지있음'
			<if test="selectList != '' and selectList == '제목'">and A.board_title like concat('%',#{searchInput},'%')</if>
			<if test="selectList != '' and selectList == '내용'">and A.board_content like concat('%',#{searchInput},'%')</if>
			<if test="selectList != '' and selectList == '작성자'">and B.employee_name like concat('%',#{searchInput},'%')</if>
		</where>
		ORDER BY A.board_date DESC, A.board_no DESC
    </select>
    
    <!-- 게시물을 INSERT하는 쿼리 -->
    <insert id="insertBoard">
		INSERT INTO board(board_section, board_announcement, board_title, board_content, board_date, board_views, employee_no)
		VALUES(#{boardSection}, #{boardAnnouncement}, #{boardTitle}, #{boardContent}, #{boardDate}, 0, #{employeeNo})
    </insert>
    
    <!-- 게시물을 UPDATE하는 쿼리 -->
    <update id="updateBoard">
		UPDATE board
		SET board_announcement = #{boardAnnouncement}, board_title = #{boardTitle}, board_content = #{boardContent}, board_date = #{boardDate}
		WHERE board_no = #{boardNo}
    </update>
    
    <!-- 게시물을 DELETE하는 쿼리 -->
    <delete id="deleteBoard">
		DELETE FROM board
		WHERE board_no = #{boardNo}
    </delete>
    
    <!-- 게시물 조회 수를 UPDATE하는 쿼리 -->
    <update id="updateViews"> 
		UPDATE board
		SET board_views = board_views + 1
		WHERE board_no = #{boardNo}
	</update>
    
    
    <!-- 게시물 상세보기를 SELECT하는 쿼리-->
    <select id="readBoard" resultType="project.soms.board.dto.BoardDto">
		SELECT board_no, board_section, board_announcement, board_title, board_content, board_date, board_views, employee_name, employee_team, manage, A.employee_no
		FROM board A
		LEFT JOIN employee B
		ON A.employee_no = B.employee_no
		LEFT JOIN manage C
		ON B.manage_no = C.manage_no	
		WHERE board_no = #{boardNo}
    </select>
    
    <!-- 댓글 SELECT 하는 쿼리-->
	<select id="selectComment" resultType="project.soms.board.dto.CommentDto">
		SELECT comment_content, comment_date, employee_name, manage, employee_team, A.employee_no, board_no
		FROM comment AS A
		LEFT JOIN employee AS B
		ON A.employee_no = B.employee_no
		LEFT JOIN manage AS C
		ON B.manage_no = C.manage_no
		WHERE A.board_no = #{boardNo}
    </select>
    
    <!-- 댓글 INSERT 하는 쿼리 -->
    <insert id="writeComment">
		INSERT INTO comment(comment_content, comment_date, employee_no, board_no)
		VALUES(#{commentContent}, #{commentDate}, #{employeeDto.employeeNo}, #{boardNo});
    </insert>
</mapper>